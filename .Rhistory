# who left in summer(july,August and Seven)
subset(flights, month>=7 & month<=9)
# who left in summer(july,August and Seven)
subset(flights, month>=8 & month<=9)
# who left in summer(july,August and Seven)
subset(flights, month>=9 & month<=9)
# who left in summer(july,August and Seven)
subset(flights, month>=9 & month<=9)
# who left in summer(july,August and Seven)
subset(flights, month>=7 & month<=9)
# who left in summer(july,August and Seven)
p<-subset(flights, month>=7 & month<=9)
View(p)
View(p)
#Who arrived more thatn 2h late but did not leave late
fileter(flights, arr_delay==2 & dep_delay==0)
#Who arrived more thatn 2h late but did not leave late
filter(flights, arr_delay==2 & dep_delay==0)
# arrange as per descending order
arrange(flights, desc(arr_delay))
select(flights, year:2013,day==2,ends_with(("delay"),distance=<580,air_time==>5))
#select(flights, year:2013,day==2,ends_with(("delay"),distance=<580,air_time==>5))
mutate(flights,gain = arr_delay dep_delay, speed = distance / time *60)
#select(flights, year:2013,day==2,ends_with(("delay"),distance=<580,air_time==>5))
mutate(flights,gain = arr_delay - dep_delay, speed = distance / air_time *60)
#select(flights, year:2013,day==2,ends_with(("delay"),distance=<580,air_time==>5))
flights_speet=mutate(flights,gain = arr_delay - dep_delay, speed = distance / air_time *60)
d= select(flights_speed,gain,speed,year,time_hour)
d= select(flights_speed,gain,speed,year:time_hour)
d= select(flights_speet,gain,speed,year:time_hour)
View(flights)
View(flights_speet)
View(d)
airports<-nycflights13::airports
planedata<-nycflights13::flights
join_data<-planedata %>% ***_join( airports, by=c("dest"="faa")
average_delay<-group_by(flights,dest)%>%
sumarise(delay_mean(arr_delay,na.rn=TRUE))
weather<-nycflights13::weather
View(flights)
View(flights)
join_data<-planedata %>% ***_join( airports, by=c("dest"="faa"))
join_data<-planedata %>% _join( airports, by=c("dest"="faa"))
combined<-flights%>%inner_join(airports,by=c("dest"="faa"))
View(combined)
join_data<-planedata %>% _join( airports, by=c("dest"="faa"))
join_data<-planedata%>%_join(airports, by=c("dest"="faa"))
average_delay<-group_by(flights,dest)%>%
sumarise(delay=mean(arr_delay,na.rm =TRUE))
average_delay<- group_by(flight,dest)%>%
summarise(delay=sumarize_delay, na.m=)
average_delay<-group_by(flights,dest)%>%
sumarise(delay=mean(arr_delay,na.rm =TRUE))
average_delay<-group_by(flights,dest)%>%
summarise(delay=mean(arr_delay,na.rm =TRUE))
average_delay<- group_by(flight,dest)%>%
summarise(delay=sumarize_delay, na.rm=TRUE)
new<-airports %>% inner_join(average_delay,by="dest")
new<-airports %>% inner_join(average_delay,by="faa")
View(average_delay)
View(average_delay)
View(airports)
new<-airports %>% inner_join(average_delay,by=c("dest"="faa"))
new<-airports %>% inner_join(average_delay,by=c("faa"="dest"))
View(new)
View(new)
install.packages("quickmapr")
install.packages("maps")
library(maps)
airports%>% semi_join(average_delay,c("faa"="dest"))%>%ggplot(aes(lon,lot))+borders("state")+geom_point()+coord_quickmap()
library(ggplot2)
airports%>% semi_join(average_delay,c("faa"="dest"))%>%ggplot(aes(lon,lot))+borders("state")+geom_point()+coord_quickmap()
airports%>% semi_join(average_delay,c("faa"="dest"))%>%ggplot(aes(lon, lat))+borders("state")+geom_point()+coord_quickmap()
airports%>% semi_join(new,c("faa"="dest"))%>%ggplot(aes(lon, lat))+borders("state")+geom_point()+coord_quickmap()
airports%>% semi_join(new,c("dest"="faa"))%>%ggplot(aes(lon, lat))+borders("state")+geom_point()+coord_quickmap()
airports%>% semi_join(average_delay,c("dest"="faa"))%>%ggplot(aes(lon, lat))+borders("state")+geom_point()+coord_quickmap()
airports%>% semi_join(average_delay,c("faa"="dest"))%>%ggplot(aes(lon, lat, color='new'))+borders("state")+geom_point()+coord_quickmap()
planedata<-nycflights13::flights
filter(planedata, day==1,month==1)
knitr::opts_chunk$set(echo = TRUE)
planedata<-nycflights13::flights
View(planedata)
filter(planedata, day==1,month==1)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
planedata<-nycflights13::flights
filter(planedata, day==1,month==1)
library(dplyr)
library(tidyselect)
library(maps)
planedata<-nycflights13::flights
View(planedata)
filter(planedata, day==1,month==1)
airports<-nycflights13::airports
weather<-nycflights13::weather
# joining two data with comon value of dest and faa
combined<-flights%>%inner_join(airports,by=c("dest"="faa"))
#calculate the average Delay of flights as per destination
average_delay<-group_by(flights,dest)%>%
summarise(delay=mean(arr_delay,na.rm =TRUE))
#join airports table with average_delay table with comon value of faa and dest ensamble
new<-airports %>% inner_join(average_delay,by=c("faa"="dest"))
#load package maps
airports%>% semi_join(average_delay,c("faa"="dest"))%>%ggplot(aes(lon, lat, color='new'))+borders("state")+geom_point()+coord_quickmap()
#average_delay<- group_by(flight,dest)%>%
# summarise(delay=sumarize_delay, na.rm=TRUE)
airports%>% semi_join(average_delay,c("faa"="dest"))%>%ggplot(aes(lon, lat, color='new'))+borders("state")+geom_point()+coord_quickmap()
new<-airports %>% inner_join(average_delay,by=c("faa"="dest"))
library(dplyr)
library(ggplot2)
library(nycflights13)
library(maps)
library(tidyselect)
planedata<-nycflights13::flights
filter(planedata, day==1,month==1)
airports<-nycflights13::airports
weather<-nycflights13::weather
# joining two data with comon value of dest and faa
combined<-flights%>%inner_join(airports,by=c("dest"="faa"))
#calculate the average Delay of flights as per destination
average_delay<-group_by(flights,dest)%>%
summarise(delay=mean(arr_delay,na.rm =TRUE))
#join airports table with average_delay table with comon value of faa and dest ensamble
new<-airports %>% inner_join(average_delay,by=c("faa"="dest"))
#load package maps
airports%>% semi_join(average_delay,c("faa"="dest"))%>%ggplot(aes(lon, lat, color='new'))+borders("state")+geom_point()+coord_quickmap()
#average_delay<- group_by(flight,dest)%>%
# summarise(delay=sumarize_delay, na.rm=TRUE)
#import the data
library(ggplot2)
View(diamonds)
ddata=diamonds
str(ddata)
# la variable de prediction est charges
# the prediction variable is charges
summary(ddata$carat)
# the mean is greater than median so it is a right skewed distribution as confirmed by histogram
hist(ddata$price)
# matrice de correlation des variables entre elles
# correlation matrix
cor(ddata[c("cut","depth","clarity","table")])
# matrice de correlation des variables entre elles
# correlation matrix
cor(ddata[c("cut","depth","table")])
# matrice de correlation des variables entre elles
# correlation matrix
cor(ddata[c("x","y","z")])
View(ddata)
View(ddata)
# install package psych
library(psych)
# la plus forte correlation est entre age et charges
# the strongest correlation is between age and charges
ruby(ddata[c("depth","table","carat")])
# la plus forte correlation est entre age et charges
# the strongest correlation is between age and charges
pairs(ddata[c("depth","table","carat")])
# install package psych
library(psych)
pairs.panels(ddata[c("depth", "table", "carat")])
pairs.panels(ddata[c("depth", "table", "carat")])
pairs.panels(ddata[c("depth", "table", "carat")])
# building the model (linear regression)
diamond_model<-lm(price~x+y+z+depth+table,carat)
# building the model (linear regression)
diamond_model<-lm(price~x+y+z+depth+table+carat)
# or
dat_model<-lm(price~ .,ddata)
summary(dat_model)
# chaque coeff sous le nom de la variable indique l'increment de charge pour une augmentation
# de 1 de la variable ex pour age +1 = 256$ de charges supp
# under each coefficient you get an indication how much increment of predicted variable correspond increment of 1 of the
# of the variable influencing prediction
# now we seperate in two part the dataset we take 75% of lines for train, remaining for test
dat_model2<-ddata[1:1100,]
dat_test2<-ddata[1101:1338,]
dat_train2<-dat_model2
dat_model2<-lm(price~x+y+z+depth+table,train_train2)
dat_model2<-lm(price~x+y+z+depth+table,dat_train2)
dat_pred<-predict(dat_model2,dat_test2)
# we check model performance prediction and charges in test should be highly correlated if model is good
cor(dat_test2$price,dat_pred)
head(dat_pred)
# to compare side by side prediction and real data in test
comparaison<-cbind(dat_test2$price,dat_pred)
dat_model2
head(dat_pred)
head(ins_test2$charges)
# to compare side by side prediction and real data in test
comparaison<-cbind(dat_test2$price,dat_pred)
dat_model2
knitr::opts_chunk$set(echo = TRUE)
#import the data
library(ggplot2)
ddata=diamonds
str(ddata)
# The carata is used for the predition of price
# prediction is based on the strength of carat
summary(ddata$carat)
# the mean is greater than median so it is a right skewed distribution as confirmed by histogram
hist(ddata$price)
# matrice de correlation des variables entre elles
# correlation matrix
cor(ddata[c("depth","table","carat")])
# la plus forte correlation est entre depth et price
# the strongest correlation is between depth and price
pairs(ddata[c("depth","table","carat")])
# install package psych
library(psych)
pairs.panels(ddata[c("depth", "table", "carat")])
# building the model (linear regression)
diamond_model<-lm(price~x+y+z+depth+table+carat)
setwd("/media/gracie/localdrive/Epita/2nd sem/predective_analaysis/linearRigression/OneDrive_1_5-11-2020")
#import the data
library(ggplot2)
ddata=diamonds
str(ddata)
# The carata is used for the predition of price
# prediction is based on the strength of carat
summary(ddata$carat)
# the mean is greater than median so it is a right skewed distribution as confirmed by histogram
hist(ddata$price)
# matrice de correlation des variables entre elles
# correlation matrix
cor(ddata[c("depth","table","carat")])
# la plus forte correlation est entre depth et price
# the strongest correlation is between depth and price
pairs(ddata[c("depth","table","carat")])
# install package psych
library(psych)
pairs.panels(ddata[c("depth", "table", "carat")])
# building the model (linear regression)
diamond_model<-lm(price~x+y+z+depth+table+carat)
#import the data
library(ggplot2)
ddata=diamonds
str(ddata)
# The carata is used for the predition of price
# prediction is based on the strength of carat
summary(ddata$carat)
# the mean is greater than median so it is a right skewed distribution as confirmed by histogram
hist(ddata$price)
# matrice de correlation des variables entre elles
# correlation matrix
cor(ddata[c("depth","table","carat")])
# la plus forte correlation est entre depth et price
# the strongest correlation is between depth and price
pairs(ddata[c("depth","table","carat")])
# install package psych
library(psych)
pairs.panels(ddata[c("depth", "table", "carat")])
# building the model (linear regression)
diamond_model<-lm(price~x+y+z+depth+table+carat)
# or
dat_model<-lm(price~ .,ddata)
summary(dat_model)
# chaque coeff sous le nom de la variable indique l'increment de charge pour une augmentation
# de 1 de la variable ex pour age +1 = 256$ de charges supp
# under each coefficient you get an indication how much increment of predicted variable correspond increment of 1 of the
# of the variable influencing prediction
# now we seperate in two part the dataset we take 75% of lines for train, remaining for test
dat_model2<-ddata[1:1100,]
dat_test2<-ddata[1101:1338,]
dat_train2<-dat_model2
dat_model2<-lm(price~x+y+z+depth+table,dat_train2)
dat_pred<-predict(dat_model2,dat_test2)
# we check model performance prediction and charges in test should be highly correlated if model is good
cor(dat_test2$price,dat_pred)
head(dat_pred)
head(ins_test2$charges)
# to compare side by side prediction and real data in test
comparaison<-cbind(dat_test2$price,dat_pred)
dat_model2
```
#import the data
library(ggplot2)
ddata=diamonds
str(ddata)
# The carata is used for the predition of price
# prediction is based on the strength of carat
summary(ddata$carat)
# the mean is greater than median so it is a right skewed distribution as confirmed by histogram
hist(ddata$price)
# matrice de correlation des variables entre elles
# correlation matrix
cor(ddata[c("depth","table","carat")])
# la plus forte correlation est entre depth et price
# the strongest correlation is between depth and price
pairs(ddata[c("depth","table","carat")])
# install package psych
library(psych)
pairs.panels(ddata[c("depth", "table", "carat")])
# building the model (linear regression)
diamond_model<-lm(price~x+y+z+depth+table+carat)
# or
dat_model<-lm(price~ .,ddata)
summary(dat_model)
# chaque coeff sous le nom de la variable indique l'increment de charge pour une augmentation
# de 1 de la variable ex pour age +1 = 256$ de charges supp
# under each coefficient you get an indication how much increment of predicted variable correspond increment of 1 of the
# of the variable influencing prediction
# now we seperate in two part the dataset we take 75% of lines for train, remaining for test
dat_model2<-ddata[1:1100,]
dat_test2<-ddata[1101:1338,]
dat_train2<-dat_model2
dat_model2<-lm(price~x+y+z+depth+table,dat_train2)
dat_pred<-predict(dat_model2,dat_test2)
# we check model performance prediction and charges in test should be highly correlated if model is good
cor(dat_test2$price,dat_pred)
head(dat_pred)
head(ins_test2$charges)
# to compare side by side prediction and real data in test
comparaison<-cbind(dat_test2$price,dat_pred)
dat_model2
```
# or
dat_model<-lm(price~ .,ddata)
summary(dat_model)
# chaque coeff sous le nom de la variable indique l'increment de charge pour une augmentation
# de 1 de la variable ex pour age +1 = 256$ de charges supp
# under each coefficient you get an indication how much increment of predicted variable correspond increment of 1 of the
# of the variable influencing prediction
# now we seperate in two part the dataset we take 75% of lines for train, remaining for test
dat_model2<-ddata[1:1100,]
dat_test2<-ddata[1101:1338,]
dat_train2<-dat_model2
dat_model2<-lm(price~x+y+z+depth+table,dat_train2)
dat_pred<-predict(dat_model2,dat_test2)
# we check model performance prediction and charges in test should be highly correlated if model is good
cor(dat_test2$price,dat_pred)
head(dat_pred)
head(ins_test2$charges)
# to compare side by side prediction and real data in test
comparaison<-cbind(dat_test2$price,dat_pred)
dat_model2
ddata=diamonds
str(ddata)
# The carata is used for the predition of price
# prediction is based on the strength of carat
summary(ddata$carat)
# matrice de correlation des variables entre elles
# correlation matrix
cor(ddata[c("depth","table","carat")])
pairs.panels(ddata[c("depth", "table", "carat")])
# building the model (linear regression)
diamond_model<-lm(price~x+y+z+depth+table+carat)
View(dat_model)
View(dat_model)
View(dat_model)
#import the data
insurance<-read.csv("BC1insurance copie 2.csv", stringsAsFactors=TRUE)
str(insurance)
# la variable de prediction est charges
# the prediction variable is charges
summary(insurance$charges)
# the mean is greater than median so it is a right skewed distribution as confirmed by histogram
hist(insurance$charges)
# matrice de correlation des variables entre elles
# correlation matrix
cor(insurance[c("age","bmi","children","charges")])
# la plus forte correlation est entre age et charges
# the strongest correlation is between age and charges
pairs(insurance[c("age","bmi","children","charges")])
# install package psych
library(psych)
pairs.panels(insurance[c("age", "bmi", "children", "charges")])
# building the model (linear regression)
insurance_model<-lm(charges~age+sex+smoker+region+bmi+children,insurance)
# or
ins_model<-lm(charges~ .,insurance)
summary(ins_model)
# chaque coeff sous le nom de la variable indique l'increment de charge pour une augmentation
# de 1 de la variable ex pour age +1 = 256$ de charges supp
# under each coefficient you get an indication how much increment of predicted variable correspond increment of 1 of the
# of the variable influencing prediction
# now we seperate in two part the dataset we take 75% of lines for train, remaining for test
ins_model2<-insurance[1:1100,]
ins_test2<-insurance[1101:1338,]
ins_train2<-ins_model2
ins_model2<-lm(charges~age+sex+smoker+region+bmi+children,ins_train2)
ins_pred<-predict(ins_model2,ins_test2)
# we check model performance prediction and charges in test should be highly correlated if model is good
cor(ins_test2$charges,ins_pred)
head(ins_pred)
head(ins_test2$charges)
# to compare side by side prediction and real data in test
comparaison<-cbind(ins_test2$charges,ins_pred)
ins_model2
View(insurance_model)
# building the model (linear regression)
insurance_model<-lm(charges~age+sex+smoker+region+bmi+children,insurance)
# building the model (linear regression)
diamond_model<-lm(price~x+y+z+depth+table+carat,diamonds)
# building the model (linear regression)
diamond_model<-lm(price~x+y+z+depth+table+carat,ddata)
# building the model (linear regression)
diamond_model<-lm(price~x+y+z+depth+table+carat,ddata)
# or
dat_model<-lm(price~ .,ddata)
summary(dat_model)
# chaque coeff sous le nom de la variable indique l'increment de charge pour une augmentation
# de 1 de la variable ex pour age +1 = 256$ de charges supp
# under each coefficient you get an indication how much increment of predicted variable correspond increment of 1 of the
# of the variable influencing prediction
# now we seperate in two part the dataset we take 75% of lines for train, remaining for test
dat_model2<-ddata[1:1100,]
dat_test2<-ddata[1101:1338,]
dat_train2<-dat_model2
dat_model2<-lm(price~x+y+z+depth+table,dat_train2)
dat_pred<-predict(dat_model2,dat_test2)
# we check model performance prediction and charges in test should be highly correlated if model is good
cor(dat_test2$price,dat_pred)
head(dat_pred)
head(ins_test2$charges)
# to compare side by side prediction and real data in test
comparaison<-cbind(dat_test2$price,dat_pred)
dat_model2
# The carata is used for the predition of price
# prediction is based on the strength of carat
summary(ddata$carat)
# the mean is greater than median so it is a right skewed distribution as confirmed by histogram
hist(ddata$price)
# matrice de correlation des variables entre elles
# correlation matrix
cor(ddata[c("depth","table","carat")])
# la plus forte correlation est entre depth et price
# the strongest correlation is between depth and price
pairs(ddata[c("depth","table","carat")])
pairs.panels(ddata[c("depth", "table", "carat")])
# building the model (linear regression)
diamond_model<-lm(price~x+y+z+depth+table+carat,ddata)
#import the data
library(ggplot2)
ddata=diamonds
str(ddata)
# The carata is used for the predition of price
# prediction is based on the strength of carat
summary(ddata$carat)
# the mean is greater than median so it is a right skewed distribution as confirmed by histogram
hist(ddata$price)
# matrice de correlation des variables entre elles
# correlation matrix
cor(ddata[c("depth","table","carat")])
# la plus forte correlation est entre depth et price
# the strongest correlation is between depth and price
pairs(ddata[c("depth","table","carat")])
# install package psych
library(psych)
pairs.panels(ddata[c("depth", "table", "carat")])
# building the model (linear regression)
diamond_model<-lm(price~x+y+z+depth+table+carat,ddata)
# or
dat_model<-lm(price~ .,ddata)
summary(dat_model)
# chaque coeff sous le nom de la variable indique l'increment de charge pour une augmentation
# de 1 de la variable ex pour age +1 = 256$ de charges supp
# under each coefficient you get an indication how much increment of predicted variable correspond increment of 1 of the
# of the variable influencing prediction
# now we seperate in two part the dataset we take 75% of lines for train, remaining for test
dat_model2<-ddata[1:1100,]
dat_test2<-ddata[1101:1338,]
dat_train2<-dat_model2
dat_model2<-lm(price~x+y+z+depth+table,dat_train2)
dat_pred<-predict(dat_model2,dat_test2)
# we check model performance prediction and charges in test should be highly correlated if model is good
cor(dat_test2$price,dat_pred)
head(dat_pred)
head(ins_test2$charges)
# to compare side by side prediction and real data in test
comparaison<-cbind(dat_test2$price,dat_pred)
dat_model2
knitr::opts_chunk$set(echo = TRUE)
#import the data
library(ggplot2)
ddata=diamonds
str(ddata)
# The carata is used for the predition of price
# prediction is based on the strength of carat
summary(ddata$carat)
# the mean is greater than median so it is a right skewed distribution as confirmed by histogram
hist(ddata$price)
# matrice de correlation des variables entre elles
# correlation matrix
cor(ddata[c("depth","table","carat")])
# la plus forte correlation est entre depth et price
# the strongest correlation is between depth and price
pairs(ddata[c("depth","table","carat")])
# install package psych
library(psych)
pairs.panels(ddata[c("depth", "table", "carat")])
# building the model (linear regression)
diamond_model<-lm(price~x+y+z+depth+table+carat,ddata)
# or
dat_model<-lm(price~ .,ddata)
summary(dat_model)
# chaque coeff sous le nom de la variable indique l'increment de charge pour une augmentation
# de 1 de la variable ex pour age +1 = 256$ de charges supp
# under each coefficient you get an indication how much increment of predicted variable correspond increment of 1 of the
# of the variable influencing prediction
# now we seperate in two part the dataset we take 75% of lines for train, remaining for test
dat_model2<-ddata[1:1100,]
dat_test2<-ddata[1101:1338,]
dat_train2<-dat_model2
dat_model2<-lm(price~x+y+z+depth+table,dat_train2)
dat_pred<-predict(dat_model2,dat_test2)
# we check model performance prediction and charges in test should be highly correlated if model is good
cor(dat_test2$price,dat_pred)
head(dat_pred)
head(dat_test2$price)
# to compare side by side prediction and real data in test
comparaison<-cbind(dat_test2$price,dat_pred)
dat_model2
